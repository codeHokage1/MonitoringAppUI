@page "/apps/{appId}"
@using System.Text.Json
@inject HttpClient Http

<h3 class="text-center mt-4">Telemetry Details for App @appId</h3>

@if (telemetryData == null)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-lg-4">
                <h4>Logs</h4>
                <ul class="list-group">
                    @foreach (var log in logs)
                    {
                        <li class="list-group-item">@log.Data</li>
                    }
                </ul>
            </div>
            <div class="col-lg-4">
                <h4>Metrics</h4>
                <ul class="list-group">
                    @foreach (var metric in metrics)
                    {
                        <li class="list-group-item">@metric.Data</li>
                    }
                </ul>
            </div>
            <div class="col-lg-4">
                <h4>Traces</h4>
                <ul class="list-group">
                    @foreach (var trace in traces)
                    {
                        <li class="list-group-item">@trace.Data</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string appId { get; set; }

    private List<TelemetryModel> telemetryData;
    private List<TelemetryModel> logs = new();
    private List<TelemetryModel> metrics = new();
    private List<TelemetryModel> traces = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the app details using appId (which is now a string)
        Console.WriteLine($"Loading details for App ID: {appId}");

        // Fetch telemetry data for the selected app
        try
        {
            telemetryData = await Http.GetFromJsonAsync<List<TelemetryModel>>($"https://localhost:7142/api/monitoringappapi/apps/{appId}");
            Console.WriteLine($"Telemetry data: {JsonSerializer.Serialize(telemetryData)}");
        }
        catch (JsonException ex)
        {
            Console.WriteLine("Error deserializing JSON: " + ex.Message);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine("HTTP request failed: " + ex.Message);
        }


        // Sort telemetry data into logs, metrics, and traces
        foreach (var item in telemetryData)
        {
            // Console.WriteLine($"Telemetry item: {JsonSerializer.Serialize(item)}");
            switch (item.Type)
            {
                case "logs":
                    logs.Add(item);
                    break;
                case "metrics":
                    metrics.Add(item);
                    break;
                case "trace":
                    traces.Add(item);
                    break;
            }
        }

        Console.WriteLine($"Logs: {JsonSerializer.Serialize(logs)}");
        Console.WriteLine($"Metrics: {JsonSerializer.Serialize(metrics)}");
        Console.WriteLine($"Traces: {JsonSerializer.Serialize(traces)}");
    }

    public class TelemetryModel
    {
        public string Type { get; set; } // Type could be log, metric, or trace
        public object Data { get; set; } // Actual content of telemetry data
    }
}
