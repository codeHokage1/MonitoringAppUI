@page "/monitoring"
@inject HttpClient Http
@inject ILogger<Monitoring> Logger
@inject NavigationManager NavigationManager

<h2>Monitoring</h2>

<h3>Monitor New Applications:</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success" role="alert">
        @SuccessMessage
    </div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<EditForm Model="appData" OnValidSubmit="HandleValidSubmit" FormName="addApplication">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="appName" class="form-label">Application Name</label>
        <InputText id="appName" class="form-control" @bind-Value="appData.AppName" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


<h3 class="text-center mt-4">Monitored Apps Dashboard</h3>

@if (apps == null)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{
    <div class="table-responsive mt-4">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>App ID</th>
                    <th>App Name</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var app in apps)
                {
                    <tr @onclick="() => OpenAppDetails(app.Id)" class="clickable-row">
                        <td>@app.Id</td>
                        <td>@app.AppName</td>
                        <td>
                            @* @if (app.Status == "Active")
                    {
                    <span class="badge bg-success">Active</span>
                    }
                    else
                    {
                    <span class="badge bg-danger">Inactive</span>
                    } *@
                            <span class="badge bg-danger">Inactive</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    // Model for form data
    private AppData appData = new();

    // Success and error messages
    private string SuccessMessage;
    private string ErrorMessage;

    // Handle valid form submission
    private async Task HandleValidSubmit()
    {
        try
        {
            Logger.LogInformation("Data to be sent ${data}", appData);
            var response = await Http.PostAsJsonAsync("https://localhost:7142/api/monitoringappapi/apps", appData);

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Application submitted successfully!";
                ErrorMessage = string.Empty;

                // Clear form data after success
                appData = new AppData();

                // Clear the success message after 3 seconds
                await Task.Delay(3000);
                SuccessMessage = string.Empty;
                StateHasChanged();  // Force re-render after delay
            }
            else
            {
                ErrorMessage = $"Error: {response.ReasonPhrase}";
                SuccessMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception: {ex.Message}";
            SuccessMessage = string.Empty;
        }
    }

    // Model class for form data
    public class AppData
    {
        public string AppName { get; set; }
    }



    // For Dashboard <summary>
    private List<AppModel> apps;

    protected override async Task OnInitializedAsync()
    {
        // Fetch apps from the API endpoint
        apps = await Http.GetFromJsonAsync<List<AppModel>>("https://localhost:7142/api/monitoringappapi/apps");
        Logger.LogInformation("Apps data: {apps}", apps);

    }

    private void OpenAppDetails(string appId)
    {
        // Navigate to the details page for the selected app
        NavigationManager.NavigateTo($"/apps/{appId}");
    }

    public class AppModel
    {
        public string Id { get; set; }
        public string AppName { get; set; }
        // public string Status { get; set; }
    }
}

